@model BloquesJuarez.Models.ViewModels.ProductoVM
@{
    ViewData["Title"] = "Crear";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form method="post" asp-action="Crear" id="form">
    <div class="border p-3 main-container">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group text-center">
            <h2 class="text-info">Nuevo Producto</h2>
        </div>
        <hr />

        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <label asp-for="Producto.NombreProducto" class="form-label font-weight-bold">Nombre del Producto</label>
                    <input asp-for="Producto.NombreProducto" class="form-control" />
                    <span asp-validation-for="Producto.NombreProducto" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Producto.CategoriaId" class="form-label font-weight-bold">Categoría</label>
                    <select asp-for="Producto.CategoriaId" asp-items="@Model.CategoriaLista" class="form-select">
                        <option disabled selected>--Seleccione una Categoría</option>
                    </select>
                    <span asp-validation-for="Producto.CategoriaId" class="text-danger"></span>

                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-6">
                    <label asp-for="Producto.UniDeMedida" class="form-label font-weight-bold">Unidad de Medida</label>
                    <select asp-for="Producto.UniDeMedida" class="form-select">
                        <option value="Kg">Kg</option>
                        <option value="Unidades">Unidades</option>
                        <option value="Mts cúbicos">Mts &sup3</option>
                        <option value="Horas">Horas</option>
                        <option value="Pallets">Pallets</option>
                        <option value="Bolsas">Bolsas</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label asp-for="Producto.Precio" class="form-label font-weight-bold">Precio</label>
                    <input asp-for="Producto.Precio" class="form-control" id="precioInput" />
                    <span asp-validation-for="Producto.Precio" class="text-danger"></span>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-6 col-md-6">
                    <button type="button" class="btn btn-primary form-control" onclick="prepararFormulario()">Crear Producto</button>
                </div>
                <div class="col-6 col-md-6">
                    <a asp-controller="Producto" asp-action="Index" class="btn btn-secondary form-control">Regresar</a>
                </div>
            </div>
        </div>
    </div>
</form>

<style>
    .main-container {
        padding: 20px; /* Ajusta el valor según tu preferencia */
        max-width: 800px; /* Ajusta el ancho máximo según tu preferencia */
        margin: 0 auto; /* Para centrar el contenido */
    }
</style>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
   
    <script>
        function prepararFormulario() {
            // Obtener el valor actual del campo de precio
            var precioInput = document.getElementById('precioInput');
            var precioValue = precioInput.value;

            // Reemplazar el punto por coma en el valor
            var precioValueComa = precioValue.replace('.', ',');

            // Asignar el nuevo valor al campo de precio
            precioInput.value = precioValueComa;

            // Enviar el formulario
            document.getElementById('form').submit();
        }

        // Cambiar el comportamiento de la validación del lado del cliente
        $.validator.methods.number = function (value, element) {
            value = floatValue(value);
            return this.optional(element) || !isNaN(value);
        }

        $.validator.methods.range = function (value, element, param) {
            value = floatValue(value);
            return this.optional(element) || (value >= param[0] && value <= param[1]);
        }

        function floatValue(value) {
            return parseFloat(value.replace(",", "."));
        }
    </script>


}


