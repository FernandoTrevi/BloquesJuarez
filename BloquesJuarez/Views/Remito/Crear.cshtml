@model BloquesJuarez.Models.ViewModels.RemitoVM

@{
    ViewData["Title"] = "Crear Remito";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container p-2">
    <div class="row p-2">
        <div class="col-6">
            <h2 class="text-info">Crear Remito</h2>
        </div>
        <div class="col-6 text-end">
            <a asp-controller="Remito" asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Volver
            </a>
        </div>
    </div>

    <div class="container">
        <form asp-controller="Remito" asp-action="Crear" method="post">
            <!-- Sección de Información General -->
            <div class="row">
                <div class="col-md-6">
                    <label asp-for="Remito.NroRemito" class="form-label">Nro de Remito</label>
                    <input asp-for="Remito.NroRemito" class="form-control" />
                    <span asp-validation-for="Remito.NroRemito" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="FechaActual" class="form-label">Fecha</label>
                    <input type="date" class="form-control" asp-for="FechaActual" value="@Model.FechaActual.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <br />

            <!-- Sección de Cliente y Lugar de Entrega -->
            <div class="row">
                <div class="col-md-6">
                    <label asp-for="Remito.ClienteId" class="form-label">Cliente</label>
                    <select asp-for="Remito.ClienteId" asp-items="Model.ClienteLista" class="form-select">
                        <option disabled selected>--Seleccione un Cliente--</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label asp-for="Remito.LugarEntrega" class="form-label">Lugar de Entrega</label>
                    <input asp-for="Remito.LugarEntrega" class="form-control" />
                    <span asp-validation-for="Remito.LugarEntrega" class="text-danger"></span>
                </div>
            </div>
            <br />

            <!-- Sección de Observaciones -->
            <div class="row">
                <div class="col">
                    <label asp-for="Remito.Observaciones" class="form-label">Observaciones</label>
                    <input asp-for="Remito.Observaciones" class="form-control" />
                    <span asp-validation-for="Remito.Observaciones" class="text-danger"></span>
                </div>
            </div>
            <br />

            <!-- Sección de Detalles del Remito -->
            <h3 class="text-info">Detalles del Remito</h3>
            <hr />
            <br />

            <!-- Sección de Detalles de Producto -->
            <div class="row align-items-end">
                <div class="col-md-3">
                    <label asp-for="ProductoNombre" class="form-label">Producto</label>
                    <select asp-for="ProductoNombre" id="ProductoNombre" asp-items="Model.ProductoLista" class="form-select">
                        <option disabled selected>--Seleccione un Producto--</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label asp-for="ProductoCantidad" class="form-label">Cantidad</label>
                    <input asp-for="ProductoCantidad" id="ProductoCantidad" class="form-control" />
                    <span asp-validation-for="ProductoCantidad" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <button type="button" id="agregarProducto" onclick="AgregarDetalle()" class="btn btn-info form-control">Agregar Producto</button>
                </div>
            </div>
            <br />

            <!-- Sección de Tabla de Detalles -->
            <div id="detalles">
                <table id="tablaDetalle" class="table table-bordered table-striped table-hover">
                    <!-- Encabezado de la tabla -->
                    <thead>
                        <tr class="table-dark text-center">
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>

                    <!-- Cuerpo de la tabla donde se agregarán filas dinámicamente -->
                    <tbody>
                        <!-- Filas de detalles aquí... -->
                    </tbody>
                </table>
            </div>
            <br />

            <!-- Sección de Botones -->
            <div class="row">
                <div class="col-md-6">
                    <div class="form-check">
                        <input type="radio" asp-for="Remito.Estado" value="Pendiente" class="form-check-input" checked>
                        <label class="form-check-label">Sin Precio</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-check">
                        <input type="radio" asp-for="Remito.Estado" value="Pagado" class="form-check-input">
                        <label class="form-check-label">Con Precio</label>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary form-control">Confirmar Remito</button>
                </div>
                <div class="col-md-3">
                    <a asp-controller="Remito" asp-action="Index" class="btn btn-secondary form-control">Regresar</a>
                </div>
            </div>


        </form>
    </div>

    <div id="modalEdicion" class="modal">
        <div class="modal-content">
            <span class="close" onclick="CerrarModalEdicion()">&times;</span>
            <h2 id="nombreProducto"></h2> <!-- Mostrará el nombre del producto -->
            <label for="nuevaCantidad">Nueva Cantidad:</label>
            <input type="number" id="nuevaCantidad">
            <button onclick="GuardarEdicion()">Guardar</button>
        </div>
    </div>
</div>
@section Scripts {
     @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        var num = 0;
        var detalles = []; // Array para almacenar los detalles
        var ultimoNombreSeleccionado = ""; // Variable para rastrear el último código seleccionado


        function AgregarDetalle() {
            let Nombre = document.getElementById("ProductoNombre").value;
            let Cantidad = document.getElementById("ProductoCantidad").value;

            console.log("Cantidad:", Cantidad);
            if (Nombre && Cantidad && !isNaN(Cantidad) && Cantidad > 0) {
                // Verificar si el producto ya existe en la lista de detalles
                var existeProducto = detalles.some(function (detalle) {
                    return detalle.Nombre === Nombre;
                });

                if (!existeProducto) {
                    let Tabla = document.getElementById("tablaDetalle");
                    let TR = document.createElement("tr");

                    // Asignar un id único a la fila
                    TR.id = "fila_" + Nombre;

                    let TDNombre = document.createElement("td");
                    TDNombre.style.textAlign = "center";
                    let TDCantidad = document.createElement("td");
                    TDCantidad.style.textAlign = "right";
                    let TDAcciones = document.createElement("td");
                    TDAcciones.style.textAlign = "center";
                    let botonEditar = document.createElement("button");
                    let botonEliminar = document.createElement("button");

                    botonEditar.textContent = "Editar";
                    botonEditar.className = "btn btn-primary mx-2";
                    botonEditar.style = "color: black";
                    botonEditar.type = "button";
                    botonEditar.onclick = function () {
                        // Llama a la función para abrir el modal de edición
                        AbrirModalEdicion(Nombre);
                    };

                    botonEliminar.textContent = "Eliminar";
                    botonEliminar.className = "btn btn-danger mx-2";
                    botonEliminar.style = "color: black";
                    botonEliminar.type = "button";
                    botonEliminar.id = "eliminar_" + Nombre;
                    botonEliminar.onclick = function () {
                        // Llamar a la función EliminarProducto
                        EliminarProducto(this.id);
                    };

                    TDAcciones.appendChild(botonEditar);
                    TDAcciones.appendChild(botonEliminar);

                    TR.appendChild(TDNombre);
                    TR.appendChild(TDCantidad);
                    TR.appendChild(TDAcciones);

                    Tabla.appendChild(TR);
                    TDNombre.innerHTML = Nombre;
                    TDCantidad.innerHTML = Cantidad;

                    let divDetalles = document.getElementById("detalles");
                    let HiddenNombre = document.createElement("input");
                    let HiddenCantidad = document.createElement("input");

                    // Crear un div para englobar los tres input ocultos
                    let divContenedor = document.createElement("div");
                    // Asignar el id igual al valor de Nombre
                    divContenedor.id = Nombre;

                    HiddenNombre.name = "RemitoDetalle[" + num + "].Nombre";
                    HiddenNombre.value = Nombre;
                    HiddenNombre.type = "hidden";

                    Cantidad = Cantidad.replace(".", ",");

                    HiddenCantidad.name = "RemitoDetalle[" + num + "].Cantidad";
                    HiddenCantidad.value = Cantidad;
                    HiddenCantidad.type = "hidden";

                    Cantidad = Cantidad.replace(",", ".");

                    // Agregar los dos input ocultos al div contenedor
                    divContenedor.appendChild(HiddenNombre);
                    divContenedor.appendChild(HiddenCantidad);

                    // Agregar el div contenedor al documento
                    divDetalles.appendChild(divContenedor);

                    /////////////////////////////////////////////////////
                    var detalle = {
                        Nombre: Nombre,
                        Cantidad: Cantidad 
                    };
                    detalles.push(detalle);

                    // Limpiar los campos de entrada
                    document.getElementById("ProductoNombre").value = "";
                    document.getElementById("ProductoCantidad").value = "";
                    num++;

                } else {
                    alert("El producto ya está en la lista de detalles.");
                    document.getElementById("ProductoNombre").value = "";
                    document.getElementById("ProductoCantidad").value = "";
                }
            } else {
                alert("Por favor, ingrese un producto válido y una cantidad válida mayor a cero.");
            }
        }





        function EliminarProducto(idBotonEliminar) {
            // Obtener el código del botón a partir del ID
            let codigoAEliminar = idBotonEliminar.split("_")[1]; // Obtener el código del ID

            console.log("Código a eliminar:", codigoAEliminar);

            // Eliminar el detalle del array
            detalles = detalles.filter(function (detalle) {
                return detalle.Nombre !== codigoAEliminar;
            });

            // Obtener la fila de la tabla por su id y eliminarla
            let filaAEliminar = document.getElementById("fila_" + codigoAEliminar);
            if (filaAEliminar) {
                filaAEliminar.parentNode.removeChild(filaAEliminar);
            }

            // Eliminar el input oculto por su id
            let divContenedorAEliminar = document.getElementById(codigoAEliminar);
            console.log("Contenedor a eliminar:", divContenedorAEliminar);

            if (divContenedorAEliminar) {
                // Eliminar el div
                divContenedorAEliminar.parentNode.removeChild(divContenedorAEliminar);


                // Llamar a la función para resetear los índices de los divs
                ResetearIndicesDivs();



            }
        }
            function ResetearIndicesDivs() {
                // Obtener todos los divs que contienen elementos a modificar
                const divs = document.querySelectorAll('#detalles div');
                console.log("div a modificar:", divs);

                // Inicializar un contador de índices
                let indice = 0;
                console.log("Indice:", indice);

                // Iterar sobre cada div
                divs.forEach((div) => {
                    // Obtener todos los elementos dentro del div
                const elementos = div.querySelectorAll('input[name^="RemitoDetalle"]');
                    console.log("elementos dentro del div:", elementos);

                    elementos.forEach((elemento) => {
                        elemento.setAttribute('name', elemento.getAttribute('name').replace(/\[\d+\]/g, `[${indice}]`));
                    });

                    // Incrementar el contador de índices
                    indice++;

                });
                //Decrementar el num
                num--;
            }

            function ValidarYEnviar(event) {
                // Verificar si no hay productos agregados (por ejemplo, si el array de detalles está vacío)
                if (detalles.length === 0) {
                    // Mostrar un mensaje de error o tomar cualquier otra acción que desees
                    alert("No se pueden confirmar órdenes sin productos agregados.");
                    // Cancelar la acción de envío del formulario
                    event.preventDefault();
                }
                // Si hay productos, el formulario se enviará normalmente
            }

            function AbrirModalEdicion(nombre) {
                const detalle = detalles.find(detalle => detalle.Nombre === nombre);

                // Pasa el código al modal
                document.getElementById("nuevaCantidad").value = detalle.Cantidad;

                // Pasa el nombre al modal
                document.getElementById("nombreProducto").textContent = detalle.Nombre;

                // Pasa el nombre a una variable global para su uso en la función GuardarEdicion
                ultimoNombreSeleccionado = nombre;

                // Muestra el modal
                document.getElementById("modalEdicion").style.display = "block";
            }

            // Función para cerrar el modal de edición
            function CerrarModalEdicion() {
                document.getElementById("modalEdicion").style.display = "none";
            }

        function GuardarEdicion() {
            // Obtén la nueva cantidad del campo en el modal
            const nuevaCantidad = document.getElementById("nuevaCantidad").value;

            // Encuentra el detalle en el array detalles por su código
            const detalle = detalles.find(detalle => detalle.Nombre === ultimoNombreSeleccionado);

            // Actualiza la cantidad solo para el producto seleccionado
            if (detalle) {
                // Actualiza la cantidad en el array detalles
                detalle.Cantidad = nuevaCantidad;

                // Actualiza la cantidad en la fila de la tabla correspondiente
                const fila = document.getElementById("fila_" + ultimoNombreSeleccionado);
                if (fila) {
                    fila.querySelector("td:nth-child(2)").textContent = nuevaCantidad;
                }

                // Actualiza la cantidad en el input oculto correspondiente
                const divContenedor = document.getElementById(ultimoNombreSeleccionado);
                if (divContenedor) {
                    const inputCantidad = divContenedor.querySelector('input[name$=".Cantidad"]');
                    if (inputCantidad) {
                        inputCantidad.value = nuevaCantidad.replace(".", ",");
                    }
                }
            }

            // Cierra el modal de edición
            CerrarModalEdicion();
        }

       

    </script>
    <style>
        /* Estilos para el modal */
        .modal {
            display: none; /* Por defecto, el modal está oculto */
            position: fixed;
            top: 70px; /* Margen superior de 70px */
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Fondo semi-transparente */
            z-index: 1000; /* Valor alto para que esté en la parte superior */
        }

        .modal-content {
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 400px;
            margin: 0 auto; /* Centrar horizontalmente */
            padding: 20px;
            position: relative;
        }

        /* Estilos para el botón de cerrar el modal */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }

        /* Estilos para el campo de entrada y el botón en el modal */
        label {
            display: block;
            margin-bottom: 5px;
        }

        input[type="number"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        button {
            background-color: #007bff;
            color: #fff;
            padding: 8px 16px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

            button:hover {
                background-color: #0056b3;
            }

    </style>
}


